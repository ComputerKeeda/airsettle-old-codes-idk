// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: airsettle/airsettle/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddExecutionLayer struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VerificationKey string `protobuf:"bytes,2,opt,name=verificationKey,proto3" json:"verificationKey,omitempty"`
	ChainInfo       string `protobuf:"bytes,3,opt,name=chainInfo,proto3" json:"chainInfo,omitempty"`
}

func (m *MsgAddExecutionLayer) Reset()         { *m = MsgAddExecutionLayer{} }
func (m *MsgAddExecutionLayer) String() string { return proto.CompactTextString(m) }
func (*MsgAddExecutionLayer) ProtoMessage()    {}
func (*MsgAddExecutionLayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bc209b67c691bbd, []int{0}
}
func (m *MsgAddExecutionLayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddExecutionLayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddExecutionLayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddExecutionLayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddExecutionLayer.Merge(m, src)
}
func (m *MsgAddExecutionLayer) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddExecutionLayer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddExecutionLayer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddExecutionLayer proto.InternalMessageInfo

func (m *MsgAddExecutionLayer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddExecutionLayer) GetVerificationKey() string {
	if m != nil {
		return m.VerificationKey
	}
	return ""
}

func (m *MsgAddExecutionLayer) GetChainInfo() string {
	if m != nil {
		return m.ChainInfo
	}
	return ""
}

type MsgAddExecutionLayerResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgAddExecutionLayerResponse) Reset()         { *m = MsgAddExecutionLayerResponse{} }
func (m *MsgAddExecutionLayerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddExecutionLayerResponse) ProtoMessage()    {}
func (*MsgAddExecutionLayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bc209b67c691bbd, []int{1}
}
func (m *MsgAddExecutionLayerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddExecutionLayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddExecutionLayerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddExecutionLayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddExecutionLayerResponse.Merge(m, src)
}
func (m *MsgAddExecutionLayerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddExecutionLayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddExecutionLayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddExecutionLayerResponse proto.InternalMessageInfo

func (m *MsgAddExecutionLayerResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MsgAddBatch struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id                 string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	BatchNumber        uint64 `protobuf:"varint,3,opt,name=batchNumber,proto3" json:"batchNumber,omitempty"`
	MerkleRootHash     string `protobuf:"bytes,4,opt,name=merkleRootHash,proto3" json:"merkleRootHash,omitempty"`
	PrevMerkleRootHash string `protobuf:"bytes,5,opt,name=prevMerkleRootHash,proto3" json:"prevMerkleRootHash,omitempty"`
	ZkProof            string `protobuf:"bytes,6,opt,name=zkProof,proto3" json:"zkProof,omitempty"`
}

func (m *MsgAddBatch) Reset()         { *m = MsgAddBatch{} }
func (m *MsgAddBatch) String() string { return proto.CompactTextString(m) }
func (*MsgAddBatch) ProtoMessage()    {}
func (*MsgAddBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bc209b67c691bbd, []int{2}
}
func (m *MsgAddBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBatch.Merge(m, src)
}
func (m *MsgAddBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBatch proto.InternalMessageInfo

func (m *MsgAddBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddBatch) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgAddBatch) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *MsgAddBatch) GetMerkleRootHash() string {
	if m != nil {
		return m.MerkleRootHash
	}
	return ""
}

func (m *MsgAddBatch) GetPrevMerkleRootHash() string {
	if m != nil {
		return m.PrevMerkleRootHash
	}
	return ""
}

func (m *MsgAddBatch) GetZkProof() string {
	if m != nil {
		return m.ZkProof
	}
	return ""
}

type MsgAddBatchResponse struct {
	BatchStatus bool `protobuf:"varint,1,opt,name=batchStatus,proto3" json:"batchStatus,omitempty"`
}

func (m *MsgAddBatchResponse) Reset()         { *m = MsgAddBatchResponse{} }
func (m *MsgAddBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddBatchResponse) ProtoMessage()    {}
func (*MsgAddBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bc209b67c691bbd, []int{3}
}
func (m *MsgAddBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBatchResponse.Merge(m, src)
}
func (m *MsgAddBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBatchResponse proto.InternalMessageInfo

func (m *MsgAddBatchResponse) GetBatchStatus() bool {
	if m != nil {
		return m.BatchStatus
	}
	return false
}

func init() {
	proto.RegisterType((*MsgAddExecutionLayer)(nil), "airsettle.airsettle.MsgAddExecutionLayer")
	proto.RegisterType((*MsgAddExecutionLayerResponse)(nil), "airsettle.airsettle.MsgAddExecutionLayerResponse")
	proto.RegisterType((*MsgAddBatch)(nil), "airsettle.airsettle.MsgAddBatch")
	proto.RegisterType((*MsgAddBatchResponse)(nil), "airsettle.airsettle.MsgAddBatchResponse")
}

func init() { proto.RegisterFile("airsettle/airsettle/tx.proto", fileDescriptor_5bc209b67c691bbd) }

var fileDescriptor_5bc209b67c691bbd = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4f, 0xfa, 0x30,
	0x1c, 0xc6, 0xd9, 0xe0, 0xc7, 0x0f, 0xbe, 0x24, 0x18, 0x8b, 0x87, 0x05, 0xc9, 0x42, 0x76, 0x30,
	0x78, 0x99, 0x51, 0x63, 0x3c, 0x4b, 0x62, 0xa2, 0x51, 0x8c, 0x99, 0x89, 0x07, 0x6f, 0x65, 0x2b,
	0xd0, 0x00, 0xeb, 0x6c, 0x0b, 0x19, 0xbe, 0x0a, 0x5f, 0x96, 0x89, 0x17, 0x8e, 0x1e, 0x0d, 0xbc,
	0x11, 0x43, 0x61, 0x63, 0xe2, 0x82, 0xde, 0xda, 0x67, 0x9f, 0x67, 0x7d, 0xbe, 0x7f, 0xa0, 0x86,
	0x29, 0x17, 0x44, 0xca, 0x01, 0x39, 0x5a, 0x9f, 0x64, 0x68, 0x07, 0x9c, 0x49, 0x86, 0x2a, 0xb1,
	0x66, 0xc7, 0x27, 0x2b, 0x84, 0xbd, 0x96, 0xe8, 0x5e, 0x78, 0xde, 0x65, 0x48, 0xdc, 0x91, 0xa4,
	0xcc, 0xbf, 0xc5, 0x13, 0xc2, 0x91, 0x01, 0xff, 0x5d, 0x4e, 0xb0, 0x64, 0xdc, 0xd0, 0xea, 0x5a,
	0xa3, 0xe8, 0x44, 0x57, 0xd4, 0x80, 0x9d, 0x31, 0xe1, 0xb4, 0x43, 0x5d, 0xbc, 0xc0, 0x6f, 0xc8,
	0xc4, 0xd0, 0x15, 0xb1, 0x29, 0xa3, 0x1a, 0x14, 0xdd, 0x1e, 0xa6, 0xfe, 0xb5, 0xdf, 0x61, 0x46,
	0x56, 0x31, 0x6b, 0xc1, 0xb2, 0xa1, 0x96, 0xf6, 0xb2, 0x43, 0x44, 0xc0, 0x7c, 0x41, 0x50, 0x19,
	0x74, 0xea, 0xad, 0x1e, 0xd7, 0xa9, 0x67, 0xbd, 0x6b, 0x50, 0x5a, 0x1a, 0x9a, 0x58, 0xba, 0xbd,
	0x2d, 0x09, 0x97, 0x4e, 0x3d, 0x72, 0xa2, 0x3a, 0x94, 0xda, 0x0b, 0xcb, 0xdd, 0x68, 0xd8, 0x26,
	0x5c, 0x25, 0xc9, 0x39, 0x49, 0x09, 0x1d, 0x40, 0x79, 0x48, 0x78, 0x7f, 0x40, 0x1c, 0xc6, 0xe4,
	0x15, 0x16, 0x3d, 0x23, 0xa7, 0xdc, 0x1b, 0x2a, 0xb2, 0x01, 0x05, 0x9c, 0x8c, 0x5b, 0xdf, 0xd9,
	0x7f, 0x8a, 0x4d, 0xf9, 0xb2, 0xc8, 0xf8, 0xd2, 0xbf, 0xe7, 0x8c, 0x75, 0x8c, 0xfc, 0x32, 0xe3,
	0xea, 0x6a, 0x9d, 0x43, 0x25, 0x51, 0x4c, 0x5c, 0x74, 0x14, 0xf5, 0x41, 0x62, 0x39, 0x12, 0xaa,
	0xb0, 0x82, 0x93, 0x94, 0x4e, 0xa6, 0x1a, 0x64, 0x5b, 0xa2, 0x8b, 0x9e, 0x61, 0xf7, 0xe7, 0xd4,
	0x0e, 0xed, 0x94, 0x19, 0xdb, 0x69, 0x6d, 0xae, 0x1e, 0xff, 0x19, 0x8d, 0xc3, 0x3d, 0x42, 0x21,
	0xee, 0x7e, 0x7d, 0x8b, 0x5d, 0x11, 0xd5, 0xc6, 0x6f, 0x44, 0xf4, 0xdf, 0xe6, 0xd9, 0xdb, 0xcc,
	0xd4, 0xa6, 0x33, 0x53, 0xfb, 0x9c, 0x99, 0xda, 0xeb, 0xdc, 0xcc, 0x4c, 0xe7, 0x66, 0xe6, 0x63,
	0x6e, 0x66, 0x9e, 0xf6, 0xd7, 0x6b, 0x1c, 0x26, 0x57, 0x7a, 0x12, 0x10, 0xd1, 0xce, 0xab, 0xb5,
	0x3e, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x2a, 0x76, 0xa6, 0xf6, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddExecutionLayer(ctx context.Context, in *MsgAddExecutionLayer, opts ...grpc.CallOption) (*MsgAddExecutionLayerResponse, error)
	AddBatch(ctx context.Context, in *MsgAddBatch, opts ...grpc.CallOption) (*MsgAddBatchResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddExecutionLayer(ctx context.Context, in *MsgAddExecutionLayer, opts ...grpc.CallOption) (*MsgAddExecutionLayerResponse, error) {
	out := new(MsgAddExecutionLayerResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Msg/AddExecutionLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddBatch(ctx context.Context, in *MsgAddBatch, opts ...grpc.CallOption) (*MsgAddBatchResponse, error) {
	out := new(MsgAddBatchResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Msg/AddBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddExecutionLayer(context.Context, *MsgAddExecutionLayer) (*MsgAddExecutionLayerResponse, error)
	AddBatch(context.Context, *MsgAddBatch) (*MsgAddBatchResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddExecutionLayer(ctx context.Context, req *MsgAddExecutionLayer) (*MsgAddExecutionLayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExecutionLayer not implemented")
}
func (*UnimplementedMsgServer) AddBatch(ctx context.Context, req *MsgAddBatch) (*MsgAddBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBatch not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddExecutionLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddExecutionLayer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddExecutionLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Msg/AddExecutionLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddExecutionLayer(ctx, req.(*MsgAddExecutionLayer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Msg/AddBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddBatch(ctx, req.(*MsgAddBatch))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airsettle.airsettle.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddExecutionLayer",
			Handler:    _Msg_AddExecutionLayer_Handler,
		},
		{
			MethodName: "AddBatch",
			Handler:    _Msg_AddBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airsettle/airsettle/tx.proto",
}

func (m *MsgAddExecutionLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddExecutionLayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddExecutionLayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainInfo) > 0 {
		i -= len(m.ChainInfo)
		copy(dAtA[i:], m.ChainInfo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerificationKey) > 0 {
		i -= len(m.VerificationKey)
		copy(dAtA[i:], m.VerificationKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerificationKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddExecutionLayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddExecutionLayerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddExecutionLayerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ZkProof) > 0 {
		i -= len(m.ZkProof)
		copy(dAtA[i:], m.ZkProof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ZkProof)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PrevMerkleRootHash) > 0 {
		i -= len(m.PrevMerkleRootHash)
		copy(dAtA[i:], m.PrevMerkleRootHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PrevMerkleRootHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MerkleRootHash) > 0 {
		i -= len(m.MerkleRootHash)
		copy(dAtA[i:], m.MerkleRootHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MerkleRootHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.BatchNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchStatus {
		i--
		if m.BatchStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddExecutionLayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerificationKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainInfo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddExecutionLayerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BatchNumber != 0 {
		n += 1 + sovTx(uint64(m.BatchNumber))
	}
	l = len(m.MerkleRootHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PrevMerkleRootHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ZkProof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchStatus {
		n += 2
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddExecutionLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddExecutionLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddExecutionLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddExecutionLayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddExecutionLayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddExecutionLayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevMerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevMerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkProof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZkProof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BatchStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
