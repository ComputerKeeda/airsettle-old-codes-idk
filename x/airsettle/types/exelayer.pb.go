// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: airsettle/airsettle/exelayer.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Exelayer struct {
	Validator            []string `protobuf:"bytes,1,rep,name=validator,proto3" json:"validator,omitempty"`
	VotingPower          []uint64 `protobuf:"varint,2,rep,packed,name=votingPower,proto3" json:"votingPower,omitempty"`
	LatestBatch          uint64   `protobuf:"varint,3,opt,name=latestBatch,proto3" json:"latestBatch,omitempty"`
	LatestMerkleRootHash string   `protobuf:"bytes,4,opt,name=latestMerkleRootHash,proto3" json:"latestMerkleRootHash,omitempty"`
	VerificationKey      string   `protobuf:"bytes,5,opt,name=verificationKey,proto3" json:"verificationKey,omitempty"`
	ChainInfo            string   `protobuf:"bytes,6,opt,name=chainInfo,proto3" json:"chainInfo,omitempty"`
	Creator              string   `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Exelayer) Reset()         { *m = Exelayer{} }
func (m *Exelayer) String() string { return proto.CompactTextString(m) }
func (*Exelayer) ProtoMessage()    {}
func (*Exelayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_84137e008678fb12, []int{0}
}
func (m *Exelayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Exelayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Exelayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Exelayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exelayer.Merge(m, src)
}
func (m *Exelayer) XXX_Size() int {
	return m.Size()
}
func (m *Exelayer) XXX_DiscardUnknown() {
	xxx_messageInfo_Exelayer.DiscardUnknown(m)
}

var xxx_messageInfo_Exelayer proto.InternalMessageInfo

func (m *Exelayer) GetValidator() []string {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *Exelayer) GetVotingPower() []uint64 {
	if m != nil {
		return m.VotingPower
	}
	return nil
}

func (m *Exelayer) GetLatestBatch() uint64 {
	if m != nil {
		return m.LatestBatch
	}
	return 0
}

func (m *Exelayer) GetLatestMerkleRootHash() string {
	if m != nil {
		return m.LatestMerkleRootHash
	}
	return ""
}

func (m *Exelayer) GetVerificationKey() string {
	if m != nil {
		return m.VerificationKey
	}
	return ""
}

func (m *Exelayer) GetChainInfo() string {
	if m != nil {
		return m.ChainInfo
	}
	return ""
}

func (m *Exelayer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Exelayer)(nil), "airsettle.airsettle.Exelayer")
}

func init() {
	proto.RegisterFile("airsettle/airsettle/exelayer.proto", fileDescriptor_84137e008678fb12)
}

var fileDescriptor_84137e008678fb12 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x86, 0xbb, 0x6d, 0xbf, 0x7e, 0xcd, 0x7a, 0x10, 0x56, 0x0f, 0x7b, 0x90, 0x25, 0xf4, 0x94,
	0x8b, 0x09, 0xe8, 0x5d, 0xb0, 0x20, 0x28, 0x2a, 0x48, 0x7a, 0x11, 0x2f, 0xb2, 0x4d, 0xa7, 0xcd,
	0x62, 0x9a, 0x2d, 0x9b, 0x69, 0x6c, 0xae, 0xfe, 0x02, 0x7f, 0x96, 0xc7, 0x1e, 0x3d, 0x4a, 0xf2,
	0x47, 0x24, 0xab, 0x36, 0x41, 0xbc, 0xcd, 0x3c, 0xef, 0xc3, 0xb2, 0xf3, 0xd2, 0x91, 0x54, 0x26,
	0x03, 0xc4, 0x04, 0x82, 0x66, 0x82, 0x0d, 0x24, 0xb2, 0x00, 0xe3, 0xaf, 0x8c, 0x46, 0xcd, 0x0e,
	0x76, 0x89, 0xbf, 0x9b, 0x46, 0x2f, 0x5d, 0x3a, 0xbc, 0xf8, 0xf6, 0xd8, 0x11, 0x75, 0x72, 0x99,
	0xa8, 0x99, 0x44, 0x6d, 0x38, 0x71, 0x7b, 0x9e, 0x13, 0x36, 0x80, 0xb9, 0x74, 0x2f, 0xd7, 0xa8,
	0xd2, 0xc5, 0x9d, 0x7e, 0x06, 0xc3, 0xbb, 0x6e, 0xcf, 0xeb, 0x87, 0x6d, 0x54, 0x1b, 0x89, 0x44,
	0xc8, 0x70, 0x2c, 0x31, 0x8a, 0x79, 0xcf, 0x25, 0xb5, 0xd1, 0x42, 0xec, 0x84, 0x1e, 0x7e, 0xad,
	0xb7, 0x60, 0x9e, 0x12, 0x08, 0xb5, 0xc6, 0x4b, 0x99, 0xc5, 0xbc, 0xef, 0x12, 0xcf, 0x09, 0xff,
	0xcc, 0x98, 0x47, 0xf7, 0x73, 0x30, 0x6a, 0xae, 0x22, 0x89, 0x4a, 0xa7, 0xd7, 0x50, 0xf0, 0x7f,
	0x56, 0xff, 0x8d, 0xeb, 0xff, 0x47, 0xb1, 0x54, 0xe9, 0x55, 0x3a, 0xd7, 0x7c, 0x60, 0x9d, 0x06,
	0x30, 0x4e, 0xff, 0x47, 0x06, 0xec, 0x6d, 0x43, 0x9b, 0xfd, 0xac, 0xe3, 0xfb, 0xb7, 0x52, 0x90,
	0x6d, 0x29, 0xc8, 0x47, 0x29, 0xc8, 0x6b, 0x25, 0x3a, 0xdb, 0x4a, 0x74, 0xde, 0x2b, 0xd1, 0x79,
	0x38, 0x5b, 0x28, 0x8c, 0xd7, 0x53, 0x3f, 0xd2, 0xcb, 0xe0, 0x5c, 0x19, 0xfb, 0x58, 0x76, 0x3c,
	0xc1, 0xf5, 0x4c, 0xe9, 0x60, 0x62, 0x2b, 0x5c, 0x42, 0x8a, 0x8f, 0x37, 0x75, 0x7f, 0xc1, 0xa6,
	0x55, 0x3e, 0x16, 0x2b, 0xc8, 0xa6, 0x03, 0x5b, 0xfd, 0xe9, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xdd, 0x66, 0x09, 0xf0, 0xa0, 0x01, 0x00, 0x00,
}

func (m *Exelayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Exelayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Exelayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintExelayer(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ChainInfo) > 0 {
		i -= len(m.ChainInfo)
		copy(dAtA[i:], m.ChainInfo)
		i = encodeVarintExelayer(dAtA, i, uint64(len(m.ChainInfo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.VerificationKey) > 0 {
		i -= len(m.VerificationKey)
		copy(dAtA[i:], m.VerificationKey)
		i = encodeVarintExelayer(dAtA, i, uint64(len(m.VerificationKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LatestMerkleRootHash) > 0 {
		i -= len(m.LatestMerkleRootHash)
		copy(dAtA[i:], m.LatestMerkleRootHash)
		i = encodeVarintExelayer(dAtA, i, uint64(len(m.LatestMerkleRootHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.LatestBatch != 0 {
		i = encodeVarintExelayer(dAtA, i, uint64(m.LatestBatch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VotingPower) > 0 {
		dAtA2 := make([]byte, len(m.VotingPower)*10)
		var j1 int
		for _, num := range m.VotingPower {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintExelayer(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		for iNdEx := len(m.Validator) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validator[iNdEx])
			copy(dAtA[i:], m.Validator[iNdEx])
			i = encodeVarintExelayer(dAtA, i, uint64(len(m.Validator[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintExelayer(dAtA []byte, offset int, v uint64) int {
	offset -= sovExelayer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Exelayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validator) > 0 {
		for _, s := range m.Validator {
			l = len(s)
			n += 1 + l + sovExelayer(uint64(l))
		}
	}
	if len(m.VotingPower) > 0 {
		l = 0
		for _, e := range m.VotingPower {
			l += sovExelayer(uint64(e))
		}
		n += 1 + sovExelayer(uint64(l)) + l
	}
	if m.LatestBatch != 0 {
		n += 1 + sovExelayer(uint64(m.LatestBatch))
	}
	l = len(m.LatestMerkleRootHash)
	if l > 0 {
		n += 1 + l + sovExelayer(uint64(l))
	}
	l = len(m.VerificationKey)
	if l > 0 {
		n += 1 + l + sovExelayer(uint64(l))
	}
	l = len(m.ChainInfo)
	if l > 0 {
		n += 1 + l + sovExelayer(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovExelayer(uint64(l))
	}
	return n
}

func sovExelayer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExelayer(x uint64) (n int) {
	return sovExelayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Exelayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExelayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exelayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exelayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExelayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExelayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = append(m.Validator, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExelayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VotingPower = append(m.VotingPower, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExelayer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExelayer
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExelayer
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VotingPower) == 0 {
					m.VotingPower = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExelayer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VotingPower = append(m.VotingPower, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBatch", wireType)
			}
			m.LatestBatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBatch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestMerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExelayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExelayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestMerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExelayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExelayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExelayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExelayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExelayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExelayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExelayer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExelayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExelayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExelayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExelayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExelayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExelayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExelayer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExelayer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExelayer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExelayer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExelayer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExelayer = fmt.Errorf("proto: unexpected end of group")
)
