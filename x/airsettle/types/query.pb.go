// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: airsettle/airsettle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryShowExecutionLayerRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryShowExecutionLayerRequest) Reset()         { *m = QueryShowExecutionLayerRequest{} }
func (m *QueryShowExecutionLayerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowExecutionLayerRequest) ProtoMessage()    {}
func (*QueryShowExecutionLayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{2}
}
func (m *QueryShowExecutionLayerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowExecutionLayerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowExecutionLayerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowExecutionLayerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowExecutionLayerRequest.Merge(m, src)
}
func (m *QueryShowExecutionLayerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowExecutionLayerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowExecutionLayerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowExecutionLayerRequest proto.InternalMessageInfo

func (m *QueryShowExecutionLayerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryShowExecutionLayerResponse struct {
	Exelayer Exelayer `protobuf:"bytes,1,opt,name=exelayer,proto3" json:"exelayer"`
}

func (m *QueryShowExecutionLayerResponse) Reset()         { *m = QueryShowExecutionLayerResponse{} }
func (m *QueryShowExecutionLayerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowExecutionLayerResponse) ProtoMessage()    {}
func (*QueryShowExecutionLayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{3}
}
func (m *QueryShowExecutionLayerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowExecutionLayerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowExecutionLayerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowExecutionLayerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowExecutionLayerResponse.Merge(m, src)
}
func (m *QueryShowExecutionLayerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowExecutionLayerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowExecutionLayerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowExecutionLayerResponse proto.InternalMessageInfo

func (m *QueryShowExecutionLayerResponse) GetExelayer() Exelayer {
	if m != nil {
		return m.Exelayer
	}
	return Exelayer{}
}

type QueryListExecutionLayersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExecutionLayersRequest) Reset()         { *m = QueryListExecutionLayersRequest{} }
func (m *QueryListExecutionLayersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListExecutionLayersRequest) ProtoMessage()    {}
func (*QueryListExecutionLayersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{4}
}
func (m *QueryListExecutionLayersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExecutionLayersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExecutionLayersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExecutionLayersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExecutionLayersRequest.Merge(m, src)
}
func (m *QueryListExecutionLayersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExecutionLayersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExecutionLayersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExecutionLayersRequest proto.InternalMessageInfo

func (m *QueryListExecutionLayersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListExecutionLayersResponse struct {
	Exelayer   []Exelayer          `protobuf:"bytes,1,rep,name=exelayer,proto3" json:"exelayer"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListExecutionLayersResponse) Reset()         { *m = QueryListExecutionLayersResponse{} }
func (m *QueryListExecutionLayersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListExecutionLayersResponse) ProtoMessage()    {}
func (*QueryListExecutionLayersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{5}
}
func (m *QueryListExecutionLayersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListExecutionLayersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListExecutionLayersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListExecutionLayersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListExecutionLayersResponse.Merge(m, src)
}
func (m *QueryListExecutionLayersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListExecutionLayersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListExecutionLayersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListExecutionLayersResponse proto.InternalMessageInfo

func (m *QueryListExecutionLayersResponse) GetExelayer() []Exelayer {
	if m != nil {
		return m.Exelayer
	}
	return nil
}

func (m *QueryListExecutionLayersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryShowBatchRequest struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BatchNumber uint64 `protobuf:"varint,2,opt,name=batchNumber,proto3" json:"batchNumber,omitempty"`
}

func (m *QueryShowBatchRequest) Reset()         { *m = QueryShowBatchRequest{} }
func (m *QueryShowBatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowBatchRequest) ProtoMessage()    {}
func (*QueryShowBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{6}
}
func (m *QueryShowBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowBatchRequest.Merge(m, src)
}
func (m *QueryShowBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowBatchRequest proto.InternalMessageInfo

func (m *QueryShowBatchRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryShowBatchRequest) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

type QueryShowBatchResponse struct {
	Batch Batch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch"`
}

func (m *QueryShowBatchResponse) Reset()         { *m = QueryShowBatchResponse{} }
func (m *QueryShowBatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowBatchResponse) ProtoMessage()    {}
func (*QueryShowBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{7}
}
func (m *QueryShowBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowBatchResponse.Merge(m, src)
}
func (m *QueryShowBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowBatchResponse proto.InternalMessageInfo

func (m *QueryShowBatchResponse) GetBatch() Batch {
	if m != nil {
		return m.Batch
	}
	return Batch{}
}

type QueryChainListRequest struct {
	CreatorAddress string `protobuf:"bytes,1,opt,name=creatorAddress,proto3" json:"creatorAddress,omitempty"`
}

func (m *QueryChainListRequest) Reset()         { *m = QueryChainListRequest{} }
func (m *QueryChainListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainListRequest) ProtoMessage()    {}
func (*QueryChainListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{8}
}
func (m *QueryChainListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainListRequest.Merge(m, src)
}
func (m *QueryChainListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainListRequest proto.InternalMessageInfo

func (m *QueryChainListRequest) GetCreatorAddress() string {
	if m != nil {
		return m.CreatorAddress
	}
	return ""
}

type QueryChainListResponse struct {
	ExelayerChains []string `protobuf:"bytes,1,rep,name=exelayerChains,proto3" json:"exelayerChains,omitempty"`
}

func (m *QueryChainListResponse) Reset()         { *m = QueryChainListResponse{} }
func (m *QueryChainListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainListResponse) ProtoMessage()    {}
func (*QueryChainListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{9}
}
func (m *QueryChainListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainListResponse.Merge(m, src)
}
func (m *QueryChainListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainListResponse proto.InternalMessageInfo

func (m *QueryChainListResponse) GetExelayerChains() []string {
	if m != nil {
		return m.ExelayerChains
	}
	return nil
}

type QueryChainListDetailedRequest struct {
	CreatorAddress string             `protobuf:"bytes,1,opt,name=creatorAddress,proto3" json:"creatorAddress,omitempty"`
	Pagination     *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChainListDetailedRequest) Reset()         { *m = QueryChainListDetailedRequest{} }
func (m *QueryChainListDetailedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainListDetailedRequest) ProtoMessage()    {}
func (*QueryChainListDetailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{10}
}
func (m *QueryChainListDetailedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainListDetailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainListDetailedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainListDetailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainListDetailedRequest.Merge(m, src)
}
func (m *QueryChainListDetailedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainListDetailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainListDetailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainListDetailedRequest proto.InternalMessageInfo

func (m *QueryChainListDetailedRequest) GetCreatorAddress() string {
	if m != nil {
		return m.CreatorAddress
	}
	return ""
}

func (m *QueryChainListDetailedRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryChainListDetailedResponse struct {
	Exelayer   []*Exelayer         `protobuf:"bytes,1,rep,name=exelayer,proto3" json:"exelayer,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryChainListDetailedResponse) Reset()         { *m = QueryChainListDetailedResponse{} }
func (m *QueryChainListDetailedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainListDetailedResponse) ProtoMessage()    {}
func (*QueryChainListDetailedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{11}
}
func (m *QueryChainListDetailedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainListDetailedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainListDetailedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainListDetailedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainListDetailedResponse.Merge(m, src)
}
func (m *QueryChainListDetailedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainListDetailedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainListDetailedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainListDetailedResponse proto.InternalMessageInfo

func (m *QueryChainListDetailedResponse) GetExelayer() []*Exelayer {
	if m != nil {
		return m.Exelayer
	}
	return nil
}

func (m *QueryChainListDetailedResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVerificationKeyRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryVerificationKeyRequest) Reset()         { *m = QueryVerificationKeyRequest{} }
func (m *QueryVerificationKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationKeyRequest) ProtoMessage()    {}
func (*QueryVerificationKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{12}
}
func (m *QueryVerificationKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationKeyRequest.Merge(m, src)
}
func (m *QueryVerificationKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationKeyRequest proto.InternalMessageInfo

func (m *QueryVerificationKeyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryVerificationKeyResponse struct {
	Vkey string `protobuf:"bytes,1,opt,name=vkey,proto3" json:"vkey,omitempty"`
}

func (m *QueryVerificationKeyResponse) Reset()         { *m = QueryVerificationKeyResponse{} }
func (m *QueryVerificationKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationKeyResponse) ProtoMessage()    {}
func (*QueryVerificationKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{13}
}
func (m *QueryVerificationKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationKeyResponse.Merge(m, src)
}
func (m *QueryVerificationKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationKeyResponse proto.InternalMessageInfo

func (m *QueryVerificationKeyResponse) GetVkey() string {
	if m != nil {
		return m.Vkey
	}
	return ""
}

type QueryVerifyRequest struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BatchNumber uint64 `protobuf:"varint,2,opt,name=batchNumber,proto3" json:"batchNumber,omitempty"`
	Inputs      string `protobuf:"bytes,3,opt,name=inputs,proto3" json:"inputs,omitempty"`
}

func (m *QueryVerifyRequest) Reset()         { *m = QueryVerifyRequest{} }
func (m *QueryVerifyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyRequest) ProtoMessage()    {}
func (*QueryVerifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{14}
}
func (m *QueryVerifyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyRequest.Merge(m, src)
}
func (m *QueryVerifyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyRequest proto.InternalMessageInfo

func (m *QueryVerifyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryVerifyRequest) GetBatchNumber() uint64 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *QueryVerifyRequest) GetInputs() string {
	if m != nil {
		return m.Inputs
	}
	return ""
}

type QueryVerifyResponse struct {
	Result  bool   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *QueryVerifyResponse) Reset()         { *m = QueryVerifyResponse{} }
func (m *QueryVerifyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyResponse) ProtoMessage()    {}
func (*QueryVerifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31ee1de514885b3, []int{15}
}
func (m *QueryVerifyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyResponse.Merge(m, src)
}
func (m *QueryVerifyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyResponse proto.InternalMessageInfo

func (m *QueryVerifyResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *QueryVerifyResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "airsettle.airsettle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "airsettle.airsettle.QueryParamsResponse")
	proto.RegisterType((*QueryShowExecutionLayerRequest)(nil), "airsettle.airsettle.QueryShowExecutionLayerRequest")
	proto.RegisterType((*QueryShowExecutionLayerResponse)(nil), "airsettle.airsettle.QueryShowExecutionLayerResponse")
	proto.RegisterType((*QueryListExecutionLayersRequest)(nil), "airsettle.airsettle.QueryListExecutionLayersRequest")
	proto.RegisterType((*QueryListExecutionLayersResponse)(nil), "airsettle.airsettle.QueryListExecutionLayersResponse")
	proto.RegisterType((*QueryShowBatchRequest)(nil), "airsettle.airsettle.QueryShowBatchRequest")
	proto.RegisterType((*QueryShowBatchResponse)(nil), "airsettle.airsettle.QueryShowBatchResponse")
	proto.RegisterType((*QueryChainListRequest)(nil), "airsettle.airsettle.QueryChainListRequest")
	proto.RegisterType((*QueryChainListResponse)(nil), "airsettle.airsettle.QueryChainListResponse")
	proto.RegisterType((*QueryChainListDetailedRequest)(nil), "airsettle.airsettle.QueryChainListDetailedRequest")
	proto.RegisterType((*QueryChainListDetailedResponse)(nil), "airsettle.airsettle.QueryChainListDetailedResponse")
	proto.RegisterType((*QueryVerificationKeyRequest)(nil), "airsettle.airsettle.QueryVerificationKeyRequest")
	proto.RegisterType((*QueryVerificationKeyResponse)(nil), "airsettle.airsettle.QueryVerificationKeyResponse")
	proto.RegisterType((*QueryVerifyRequest)(nil), "airsettle.airsettle.QueryVerifyRequest")
	proto.RegisterType((*QueryVerifyResponse)(nil), "airsettle.airsettle.QueryVerifyResponse")
}

func init() { proto.RegisterFile("airsettle/airsettle/query.proto", fileDescriptor_b31ee1de514885b3) }

var fileDescriptor_b31ee1de514885b3 = []byte{
	// 915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0xd9, 0x6e, 0xd8, 0xbc, 0x95, 0x8a, 0x98, 0x2e, 0x55, 0xe5, 0x6c, 0xd3, 0x68,
	0x90, 0xba, 0xab, 0x02, 0x76, 0x9a, 0xee, 0x2e, 0x14, 0x0e, 0x65, 0x0b, 0xa5, 0x42, 0x54, 0x28,
	0x18, 0x89, 0x03, 0x07, 0x22, 0x27, 0x19, 0x12, 0xab, 0x49, 0x9c, 0x7a, 0x9c, 0xb6, 0x56, 0x14,
	0x09, 0xf1, 0x05, 0x40, 0xe2, 0x8a, 0x10, 0x07, 0x4e, 0x88, 0x33, 0x1c, 0xb9, 0xf6, 0x46, 0x25,
	0x2e, 0x9c, 0x10, 0x6a, 0xf9, 0x20, 0xc8, 0xe3, 0xe7, 0x34, 0x76, 0xc6, 0x69, 0x53, 0x69, 0x6f,
	0xce, 0xf8, 0xfd, 0xdf, 0xfb, 0xbd, 0x37, 0xcf, 0xff, 0x16, 0xd6, 0x2c, 0xdb, 0x15, 0xdc, 0xf3,
	0x3a, 0xdc, 0xb8, 0x7a, 0x3a, 0x1a, 0x70, 0xd7, 0xd7, 0xfb, 0xae, 0xe3, 0x39, 0x74, 0x69, 0x7c,
	0xac, 0x8f, 0x9f, 0xb4, 0x07, 0x2d, 0xa7, 0xe5, 0xc8, 0xf7, 0x46, 0xf0, 0x14, 0x86, 0x6a, 0x0f,
	0x5b, 0x8e, 0xd3, 0x0a, 0x12, 0xf5, 0x6d, 0xc3, 0xea, 0xf5, 0x1c, 0xcf, 0xf2, 0x6c, 0xa7, 0x27,
	0xf0, 0xed, 0x46, 0xc3, 0x11, 0x5d, 0x47, 0x18, 0x75, 0x4b, 0x60, 0x05, 0xe3, 0x78, 0xb3, 0xce,
	0x3d, 0x6b, 0xd3, 0xe8, 0x5b, 0x2d, 0xbb, 0x27, 0x83, 0x31, 0xb6, 0xa4, 0xa2, 0xea, 0x5b, 0xae,
	0xd5, 0x8d, 0xb2, 0x31, 0x55, 0x04, 0x3f, 0xe5, 0x1d, 0xcb, 0xe7, 0x2e, 0xc6, 0x28, 0x7b, 0xab,
	0x5b, 0x5e, 0xa3, 0x1d, 0x06, 0xb0, 0x07, 0x40, 0x3f, 0x0d, 0x40, 0xaa, 0x32, 0xb3, 0xc9, 0x8f,
	0x06, 0x5c, 0x78, 0xac, 0x0a, 0x4b, 0xb1, 0x53, 0xd1, 0x77, 0x7a, 0x82, 0xd3, 0x6d, 0xc8, 0x85,
	0x04, 0x2b, 0xa4, 0x44, 0x1e, 0xdf, 0xaf, 0x14, 0x74, 0xc5, 0x64, 0xf4, 0x50, 0xb4, 0xbb, 0x70,
	0xf6, 0xcf, 0x5a, 0xc6, 0x44, 0x01, 0x2b, 0x43, 0x51, 0x66, 0xfc, 0xac, 0xed, 0x9c, 0xec, 0x9d,
	0xf2, 0xc6, 0x20, 0x68, 0xf5, 0x20, 0x20, 0xc5, 0x9a, 0x74, 0x11, 0xb2, 0x76, 0x53, 0x26, 0xce,
	0x9b, 0x59, 0xbb, 0xc9, 0xea, 0xb0, 0x96, 0xaa, 0x40, 0x9e, 0x1d, 0xb8, 0x17, 0xf5, 0x8b, 0x44,
	0xab, 0x4a, 0xa2, 0x3d, 0x0c, 0x42, 0xa6, 0xb1, 0x88, 0xd9, 0x58, 0xe3, 0xc0, 0x16, 0x5e, 0xbc,
	0x46, 0x34, 0x0a, 0xfa, 0x21, 0xc0, 0xd5, 0xdd, 0x60, 0x95, 0x75, 0x3d, 0xbc, 0x48, 0x3d, 0xb8,
	0x48, 0x3d, 0x5c, 0x15, 0xbc, 0x48, 0xbd, 0x6a, 0xb5, 0x38, 0x6a, 0xcd, 0x09, 0x25, 0xfb, 0x95,
	0x40, 0x29, 0xbd, 0x96, 0xb2, 0xa1, 0x3b, 0x73, 0x37, 0x44, 0xf7, 0x63, 0xb4, 0x59, 0x49, 0xfb,
	0xe8, 0x5a, 0xda, 0xb0, 0x7a, 0x0c, 0xf7, 0x23, 0x78, 0x75, 0x3c, 0xfd, 0xdd, 0x60, 0x5f, 0x52,
	0xae, 0x89, 0x96, 0xe0, 0xbe, 0xdc, 0xa7, 0x4f, 0x06, 0xdd, 0x3a, 0x77, 0x65, 0xc9, 0x05, 0x73,
	0xf2, 0x88, 0x55, 0x61, 0x39, 0x99, 0x0a, 0xdb, 0x7d, 0x06, 0x77, 0x65, 0x20, 0x8e, 0x55, 0x53,
	0xf6, 0x2a, 0x25, 0xd8, 0x68, 0x18, 0xce, 0x76, 0x10, 0xee, 0xfd, 0xb6, 0x65, 0xf7, 0x82, 0x79,
	0x46, 0x70, 0xeb, 0xb0, 0xd8, 0x70, 0xb9, 0xe5, 0x39, 0xee, 0xf3, 0x66, 0xd3, 0xe5, 0x42, 0x20,
	0x68, 0xe2, 0x94, 0xbd, 0x87, 0x48, 0x13, 0x09, 0x10, 0x69, 0x1d, 0x16, 0xa3, 0x61, 0xca, 0x97,
	0x42, 0xde, 0x43, 0xde, 0x4c, 0x9c, 0xb2, 0x6f, 0x09, 0xac, 0xc6, 0x53, 0x7c, 0xc0, 0x3d, 0xcb,
	0xee, 0xf0, 0xe6, 0x9c, 0x2c, 0x89, 0x05, 0xcb, 0xde, 0x7a, 0xc1, 0x7e, 0x26, 0xf8, 0x89, 0x29,
	0x88, 0xc6, 0xdf, 0xef, 0x7c, 0xeb, 0xf5, 0x22, 0x16, 0xeb, 0x4d, 0x28, 0x48, 0xca, 0xcf, 0xb9,
	0x6b, 0x7f, 0x65, 0x37, 0xe4, 0xe1, 0xc7, 0xdc, 0x4f, 0x73, 0x81, 0x0a, 0x3c, 0x54, 0x87, 0x63,
	0x4b, 0x14, 0x16, 0x8e, 0x0f, 0xb9, 0x8f, 0x0a, 0xf9, 0xcc, 0xbe, 0x44, 0x4f, 0x93, 0x1a, 0xff,
	0xd6, 0x8b, 0x4b, 0x97, 0x21, 0x67, 0xf7, 0xfa, 0x03, 0x4f, 0xac, 0xdc, 0x91, 0x2a, 0xfc, 0xc5,
	0xf6, 0xd1, 0x1d, 0xa3, 0xfc, 0x88, 0xb2, 0x0c, 0x39, 0x97, 0x8b, 0x41, 0xc7, 0x93, 0x45, 0xee,
	0x99, 0xf8, 0x8b, 0xae, 0xc0, 0x4b, 0x5d, 0x2e, 0x84, 0xd5, 0xe2, 0xb2, 0x48, 0xde, 0x8c, 0x7e,
	0x56, 0xfe, 0x04, 0xb8, 0x2b, 0x33, 0xd1, 0xaf, 0x09, 0xe4, 0x42, 0xdf, 0xa4, 0x8f, 0x94, 0x57,
	0x32, 0x6d, 0xd2, 0xda, 0xe3, 0xeb, 0x03, 0x43, 0x32, 0xf6, 0xda, 0x37, 0x7f, 0xfd, 0xf7, 0x7d,
	0x76, 0x95, 0x16, 0x8c, 0xf4, 0x3f, 0x2a, 0xf4, 0x77, 0x02, 0x74, 0xda, 0x6b, 0xe9, 0x56, 0x7a,
	0x95, 0x54, 0x2f, 0xd7, 0x9e, 0xcc, 0x27, 0x42, 0xcc, 0x67, 0x12, 0xb3, 0x4c, 0x75, 0x25, 0xa6,
	0x68, 0x3b, 0x27, 0x35, 0x1e, 0x29, 0x6b, 0x72, 0x2d, 0x8d, 0xa1, 0xdd, 0x1c, 0xd1, 0xdf, 0x08,
	0x2c, 0x29, 0x5c, 0x95, 0xce, 0xa0, 0x48, 0x37, 0x7c, 0xed, 0xe9, 0x9c, 0x2a, 0x84, 0xaf, 0x48,
	0xf8, 0x37, 0xe8, 0x86, 0x12, 0xbe, 0x63, 0x0b, 0x2f, 0x09, 0x2f, 0xe8, 0x4f, 0x04, 0xf2, 0x63,
	0x57, 0xa4, 0x1b, 0xb3, 0x87, 0x36, 0xe9, 0xc2, 0xda, 0xeb, 0x37, 0x8a, 0x45, 0xb4, 0x77, 0x24,
	0xda, 0x13, 0x5a, 0x49, 0x9f, 0xab, 0x5c, 0x7b, 0x39, 0x4d, 0x63, 0x38, 0xf1, 0x09, 0x8c, 0xe8,
	0x8f, 0x04, 0xf2, 0x63, 0x43, 0x99, 0x85, 0x98, 0xf4, 0xe2, 0x59, 0x88, 0x53, 0xb6, 0xcb, 0xde,
	0x96, 0x88, 0x15, 0x5a, 0x56, 0x22, 0x36, 0x82, 0xf8, 0x5a, 0x30, 0x43, 0x63, 0x18, 0x77, 0xcf,
	0x11, 0xfd, 0x83, 0xc0, 0x2b, 0x53, 0x8e, 0x47, 0x2b, 0x37, 0x28, 0x9e, 0x30, 0x6c, 0x6d, 0x6b,
	0x2e, 0x0d, 0x82, 0x3f, 0x97, 0xe0, 0xef, 0xd2, 0xed, 0x6b, 0xc0, 0x6b, 0x4d, 0x54, 0x4e, 0x77,
	0xf0, 0x0b, 0x81, 0x97, 0x13, 0xf6, 0x46, 0xcb, 0xe9, 0x2c, 0x6a, 0xe3, 0xd4, 0x36, 0xe7, 0x50,
	0xdc, 0x68, 0x65, 0x8f, 0x27, 0x54, 0xb5, 0x43, 0xee, 0x87, 0xdf, 0xda, 0x0f, 0x04, 0x72, 0xa1,
	0xef, 0xcd, 0x32, 0xaa, 0x98, 0xf3, 0xce, 0x32, 0xaa, 0xb8, 0x85, 0xb2, 0x1d, 0x49, 0xb4, 0x4d,
	0xdf, 0x4a, 0x27, 0xf2, 0x15, 0x5b, 0x6a, 0x0c, 0x43, 0x67, 0x1e, 0xed, 0x3e, 0x3d, 0xbb, 0x28,
	0x92, 0xf3, 0x8b, 0x22, 0xf9, 0xf7, 0xa2, 0x48, 0xbe, 0xbb, 0x2c, 0x66, 0xce, 0x2f, 0x8b, 0x99,
	0xbf, 0x2f, 0x8b, 0x99, 0x2f, 0x0a, 0x57, 0x79, 0x4e, 0x27, 0x72, 0x7a, 0x7e, 0x9f, 0x8b, 0x7a,
	0x4e, 0xfe, 0x33, 0xbc, 0xf5, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xdb, 0xf0, 0x1a, 0x0b,
	0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of ShowExecutionLayer items.
	ShowExecutionLayer(ctx context.Context, in *QueryShowExecutionLayerRequest, opts ...grpc.CallOption) (*QueryShowExecutionLayerResponse, error)
	// Queries a list of ListExecutionLayers items.
	ListExecutionLayers(ctx context.Context, in *QueryListExecutionLayersRequest, opts ...grpc.CallOption) (*QueryListExecutionLayersResponse, error)
	// Queries a list of ShowBatch items.
	ShowBatch(ctx context.Context, in *QueryShowBatchRequest, opts ...grpc.CallOption) (*QueryShowBatchResponse, error)
	// Queries a list of ChainList items.
	ChainList(ctx context.Context, in *QueryChainListRequest, opts ...grpc.CallOption) (*QueryChainListResponse, error)
	// Queries a list of ChainListDetailed items.
	ChainListDetailed(ctx context.Context, in *QueryChainListDetailedRequest, opts ...grpc.CallOption) (*QueryChainListDetailedResponse, error)
	// Queries a list of VerificationKey items.
	VerificationKey(ctx context.Context, in *QueryVerificationKeyRequest, opts ...grpc.CallOption) (*QueryVerificationKeyResponse, error)
	// Queries a list of Verify items.
	Verify(ctx context.Context, in *QueryVerifyRequest, opts ...grpc.CallOption) (*QueryVerifyResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowExecutionLayer(ctx context.Context, in *QueryShowExecutionLayerRequest, opts ...grpc.CallOption) (*QueryShowExecutionLayerResponse, error) {
	out := new(QueryShowExecutionLayerResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/ShowExecutionLayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListExecutionLayers(ctx context.Context, in *QueryListExecutionLayersRequest, opts ...grpc.CallOption) (*QueryListExecutionLayersResponse, error) {
	out := new(QueryListExecutionLayersResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/ListExecutionLayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowBatch(ctx context.Context, in *QueryShowBatchRequest, opts ...grpc.CallOption) (*QueryShowBatchResponse, error) {
	out := new(QueryShowBatchResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/ShowBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainList(ctx context.Context, in *QueryChainListRequest, opts ...grpc.CallOption) (*QueryChainListResponse, error) {
	out := new(QueryChainListResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/ChainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainListDetailed(ctx context.Context, in *QueryChainListDetailedRequest, opts ...grpc.CallOption) (*QueryChainListDetailedResponse, error) {
	out := new(QueryChainListDetailedResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/ChainListDetailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerificationKey(ctx context.Context, in *QueryVerificationKeyRequest, opts ...grpc.CallOption) (*QueryVerificationKeyResponse, error) {
	out := new(QueryVerificationKeyResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/VerificationKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Verify(ctx context.Context, in *QueryVerifyRequest, opts ...grpc.CallOption) (*QueryVerifyResponse, error) {
	out := new(QueryVerifyResponse)
	err := c.cc.Invoke(ctx, "/airsettle.airsettle.Query/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of ShowExecutionLayer items.
	ShowExecutionLayer(context.Context, *QueryShowExecutionLayerRequest) (*QueryShowExecutionLayerResponse, error)
	// Queries a list of ListExecutionLayers items.
	ListExecutionLayers(context.Context, *QueryListExecutionLayersRequest) (*QueryListExecutionLayersResponse, error)
	// Queries a list of ShowBatch items.
	ShowBatch(context.Context, *QueryShowBatchRequest) (*QueryShowBatchResponse, error)
	// Queries a list of ChainList items.
	ChainList(context.Context, *QueryChainListRequest) (*QueryChainListResponse, error)
	// Queries a list of ChainListDetailed items.
	ChainListDetailed(context.Context, *QueryChainListDetailedRequest) (*QueryChainListDetailedResponse, error)
	// Queries a list of VerificationKey items.
	VerificationKey(context.Context, *QueryVerificationKeyRequest) (*QueryVerificationKeyResponse, error)
	// Queries a list of Verify items.
	Verify(context.Context, *QueryVerifyRequest) (*QueryVerifyResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ShowExecutionLayer(ctx context.Context, req *QueryShowExecutionLayerRequest) (*QueryShowExecutionLayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowExecutionLayer not implemented")
}
func (*UnimplementedQueryServer) ListExecutionLayers(ctx context.Context, req *QueryListExecutionLayersRequest) (*QueryListExecutionLayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionLayers not implemented")
}
func (*UnimplementedQueryServer) ShowBatch(ctx context.Context, req *QueryShowBatchRequest) (*QueryShowBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBatch not implemented")
}
func (*UnimplementedQueryServer) ChainList(ctx context.Context, req *QueryChainListRequest) (*QueryChainListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainList not implemented")
}
func (*UnimplementedQueryServer) ChainListDetailed(ctx context.Context, req *QueryChainListDetailedRequest) (*QueryChainListDetailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainListDetailed not implemented")
}
func (*UnimplementedQueryServer) VerificationKey(ctx context.Context, req *QueryVerificationKeyRequest) (*QueryVerificationKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationKey not implemented")
}
func (*UnimplementedQueryServer) Verify(ctx context.Context, req *QueryVerifyRequest) (*QueryVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowExecutionLayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowExecutionLayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowExecutionLayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/ShowExecutionLayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowExecutionLayer(ctx, req.(*QueryShowExecutionLayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListExecutionLayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListExecutionLayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListExecutionLayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/ListExecutionLayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListExecutionLayers(ctx, req.(*QueryListExecutionLayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/ShowBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowBatch(ctx, req.(*QueryShowBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/ChainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainList(ctx, req.(*QueryChainListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainListDetailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainListDetailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainListDetailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/ChainListDetailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainListDetailed(ctx, req.(*QueryChainListDetailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerificationKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerificationKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerificationKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/VerificationKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerificationKey(ctx, req.(*QueryVerificationKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airsettle.airsettle.Query/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Verify(ctx, req.(*QueryVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airsettle.airsettle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ShowExecutionLayer",
			Handler:    _Query_ShowExecutionLayer_Handler,
		},
		{
			MethodName: "ListExecutionLayers",
			Handler:    _Query_ListExecutionLayers_Handler,
		},
		{
			MethodName: "ShowBatch",
			Handler:    _Query_ShowBatch_Handler,
		},
		{
			MethodName: "ChainList",
			Handler:    _Query_ChainList_Handler,
		},
		{
			MethodName: "ChainListDetailed",
			Handler:    _Query_ChainListDetailed_Handler,
		},
		{
			MethodName: "VerificationKey",
			Handler:    _Query_VerificationKey_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Query_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airsettle/airsettle/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryShowExecutionLayerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowExecutionLayerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowExecutionLayerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowExecutionLayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowExecutionLayerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowExecutionLayerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Exelayer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListExecutionLayersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExecutionLayersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExecutionLayersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListExecutionLayersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListExecutionLayersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListExecutionLayersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Exelayer) > 0 {
		for iNdEx := len(m.Exelayer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Exelayer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChainListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreatorAddress) > 0 {
		i -= len(m.CreatorAddress)
		copy(dAtA[i:], m.CreatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CreatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExelayerChains) > 0 {
		for iNdEx := len(m.ExelayerChains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExelayerChains[iNdEx])
			copy(dAtA[i:], m.ExelayerChains[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ExelayerChains[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainListDetailedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainListDetailedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainListDetailedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatorAddress) > 0 {
		i -= len(m.CreatorAddress)
		copy(dAtA[i:], m.CreatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CreatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainListDetailedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainListDetailedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainListDetailedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Exelayer) > 0 {
		for iNdEx := len(m.Exelayer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Exelayer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vkey) > 0 {
		i -= len(m.Vkey)
		copy(dAtA[i:], m.Vkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Vkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Inputs) > 0 {
		i -= len(m.Inputs)
		copy(dAtA[i:], m.Inputs)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Inputs)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BatchNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BatchNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryShowExecutionLayerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowExecutionLayerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Exelayer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListExecutionLayersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListExecutionLayersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Exelayer) > 0 {
		for _, e := range m.Exelayer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BatchNumber != 0 {
		n += 1 + sovQuery(uint64(m.BatchNumber))
	}
	return n
}

func (m *QueryShowBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Batch.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChainListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExelayerChains) > 0 {
		for _, s := range m.ExelayerChains {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryChainListDetailedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainListDetailedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Exelayer) > 0 {
		for _, e := range m.Exelayer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Vkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BatchNumber != 0 {
		n += 1 + sovQuery(uint64(m.BatchNumber))
	}
	l = len(m.Inputs)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowExecutionLayerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowExecutionLayerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowExecutionLayerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowExecutionLayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowExecutionLayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowExecutionLayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exelayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Exelayer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExecutionLayersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExecutionLayersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExecutionLayersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListExecutionLayersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListExecutionLayersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListExecutionLayersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exelayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exelayer = append(m.Exelayer, Exelayer{})
			if err := m.Exelayer[len(m.Exelayer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExelayerChains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExelayerChains = append(m.ExelayerChains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainListDetailedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainListDetailedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainListDetailedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainListDetailedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainListDetailedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainListDetailedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exelayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exelayer = append(m.Exelayer, &Exelayer{})
			if err := m.Exelayer[len(m.Exelayer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNumber", wireType)
			}
			m.BatchNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
